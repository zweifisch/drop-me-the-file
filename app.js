// Generated by CoffeeScript 1.6.2
(function() {
  var app, clientSideJS, connect, fs, handler, html, http, port, _ref,
    __hasProp = {}.hasOwnProperty;

  http = require('http');

  fs = require('fs');

  connect = require('connect');

  clientSideJS = function() {
    var el, upload;

    upload = function(_arg) {
      var file, files, formData, idx, onComplete, onProgress, url, xhr, _i, _len;

      files = _arg.files, url = _arg.url, onProgress = _arg.onProgress, onComplete = _arg.onComplete;
      xhr = new XMLHttpRequest;
      if (xhr.upload) {
        xhr.open("POST", url, true);
        formData = new FormData;
        if ((Array.isArray(files)) || (files instanceof FileList)) {
          for (idx = _i = 0, _len = files.length; _i < _len; idx = ++_i) {
            file = files[idx];
            formData.append("file-" + idx, file);
          }
        } else {
          formData.append("file", files);
        }
        if (onProgress) {
          xhr.upload.addEventListener("progress", function(e) {
            return onProgress(e.loaded, e.total);
          });
        }
        if (onComplete) {
          xhr.onload = function() {
            var response;

            response = JSON.parse(this.responseText === '' ? '{}' : this.responseText);
            return onComplete(this.status, response);
          };
        }
        return xhr.send(formData);
      }
    };
    el = document.getElementById('drop');
    el.addEventListener('dragover', function(e) {
      e.stopPropagation();
      return e.preventDefault();
    });
    el.addEventListener('dragleave', function(e) {
      e.stopPropagation();
      return e.preventDefault();
    });
    return el.addEventListener('drop', function(e) {
      var files, _ref;

      e.stopPropagation();
      e.preventDefault();
      files = (_ref = e.target.files) != null ? _ref : e.dataTransfer.files;
      return upload({
        files: files,
        url: '/',
        onProgress: function(loaded, total) {
          return el.textContent = (loaded / total).toFixed(2);
        },
        onComplete: function() {
          return el.textContent = 'Done';
        }
      });
    });
  };

  html = "<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n	<meta charset=\"UTF-8\">\n	<title>Drop me the file</title>\n	<style type=\"text/css\">\n		#drop{\n			width:200px;\n			height:200px;\n			border:3px dotted #333;\n			border-radius: 100px;\n			text-align: center;\n			line-height: 200px;\n		}\n	</style>\n</head>\n<body>\n	<div id=\"drop\">\n		Drop me the file\n	</div>\n	<script type=\"text/javascript\">\n		(" + clientSideJS + ")()\n	</script>\n</body>\n</html>";

  handler = function(req, res) {
    var file, numFiles, numUploadedFiles, rs, ws, _, _ref, _results;

    if (req.method === 'GET') {
      res.writeHead(200, {
        'Content-Type': 'text/html'
      });
      res.write(html);
      return res.end();
    } else {
      numUploadedFiles = numFiles = 0;
      _ref = req.files;
      _results = [];
      for (_ in _ref) {
        if (!__hasProp.call(_ref, _)) continue;
        file = _ref[_];
        numFiles += 1;
        ws = fs.createWriteStream(file.name);
        ws.on('close', function(file) {
          numUploadedFiles += 1;
          if (numUploadedFiles >= numFiles) {
            return res.end();
          }
        });
        rs = fs.createReadStream(file.path);
        _results.push(rs.pipe(ws));
      }
      return _results;
    }
  };

  app = connect();

  app.use(connect.logger(':method :req[content-type]'));

  app.use(connect.bodyParser());

  app.use(handler);

  port = (_ref = process.env.PORT) != null ? _ref : 9999;

  app.listen(port);

  console.log("listen on port " + port + ", use PORT=<port> to change default port");

}).call(this);
